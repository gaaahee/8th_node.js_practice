// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model UserLogin {
  id       Int    @id @default(autoincrement())
  email    String @unique @db.VarChar(50)
  password String @db.VarChar(30)

  userInfo       UserInfo?
  alarms         alarm[]
  inquiries      Inquiry[]
  userCategories UserCategory[]
  missionLogs    MissionLog[]
  reviews        Review[]

  @@map("userlogin")
}

model UserInfo {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  gender       String   @db.VarChar(10)
  birthdate    DateTime
  address      String   @db.VarChar(100)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  point        Int      @default(0)
  user_name    String   @db.VarChar(20)
  phone_number String   @db.VarChar(20)

  userLogin UserLogin @relation(fields: [user_id], references: [id])

  @@map("userinfo")
}

model alarm {
  id         Int      @id @default(autoincrement())
  title      String?
  content    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id   Int
  userLogin UserLogin @relation(fields: [user_id], references: [id])

  @@map("alarm")
}

model Inquiry {
  id         Int      @id @default(autoincrement())
  user_id    Int
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  image_url  String?  @db.VarChar(200)

  userLogin UserLogin @relation(fields: [user_id], references: [id])

  @@map("inquiry")
}

model UserCategory {
  user_id     Int
  category_id Int

  userLogin UserLogin @relation(fields: [user_id], references: [id])
  category  Category  @relation(fields: [category_id], references: [id])

  @@id([user_id, category_id])
  @@map("usercategory")
}

model Category {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(20)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  userCategories UserCategory[]
  categoryShops  CategoryShop[]

  @@map("category")
}

model CategoryShop {
  category_id Int
  shop_id     Int

  category Category @relation(fields: [category_id], references: [id])
  shop     Shop     @relation(fields: [shop_id], references: [id])

  @@id([category_id, shop_id])
  @@map("categoryshop")
}

model Region {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(20)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  shops Shop[]

  @@map("region")
}

model Shop {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(30)
  region_id  Int
  address    String   @db.VarChar(100)
  created_at DateTime @default(now())

  region        Region         @relation(fields: [region_id], references: [id])
  missions      Mission[]
  reviews       Review[]
  categoryShops CategoryShop[]

  @@map("shop")
}

model Mission {
  id          Int      @id @default(autoincrement())
  shop_id     Int
  description String?  @db.VarChar(200)
  point       Int
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  due_date    DateTime

  shop        Shop         @relation(fields: [shop_id], references: [id])
  missionLogs MissionLog[]

  @@map("mission")
}

model MissionLog {
  id           Int       @id @default(autoincrement())
  status       String    @db.VarChar(10)
  user_id      Int
  mission_id   Int
  completed_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt

  userLogin UserLogin @relation(fields: [user_id], references: [id])
  mission   Mission   @relation(fields: [mission_id], references: [id])

  @@map("missionlog")
}

model Review {
  id         Int      @id @default(autoincrement())
  shop_id    Int
  rating     Int
  comment    String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int
  image_url  String?  @db.VarChar(200)

  shop      Shop      @relation(fields: [shop_id], references: [id])
  userLogin UserLogin @relation(fields: [user_id], references: [id])

  @@map("review")
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}